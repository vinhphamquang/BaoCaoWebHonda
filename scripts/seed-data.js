const mongoose = require('mongoose');
require('dotenv').config({ path: '.env.local' });

// Car Schema
const CarSchema = new mongoose.Schema({
  name: { type: String, required: true },
  model: { type: String, required: true },
  year: { type: Number, required: true },
  price: { type: Number, required: true },
  color: { type: String, required: true },
  images: [{ type: String, required: true }],
  specifications: {
    engine: { type: String, required: true },
    transmission: { type: String, required: true },
    fuelType: { type: String, required: true },
    seating: { type: Number, required: true },
    mileage: { type: String, required: true },
    safety: [{ type: String }],
    features: [{ type: String }],
  },
  description: { type: String, required: true },
  category: { type: String, required: true, enum: ['sedan', 'suv', 'hatchback', 'coupe'] },
  isAvailable: { type: Boolean, default: true },
}, { timestamps: true });

const Car = mongoose.model('Car', CarSchema);

// Sample data
const sampleCars = [
  {
    name: "Honda Civic 2024",
    model: "Civic",
    price: 730000000,
    category: "sedan",
    year: 2024,
    color: "Tr·∫Øng Ng·ªçc Trai",
    images: ["/images/cars/honda-civic-2024.jpg"],
    specifications: {
      engine: "1.5L VTEC Turbo",
      transmission: "CVT",
      fuelType: "XƒÉng",
      seating: 5,
      mileage: "6.5L/100km",
      safety: ["Honda SENSING", "6 t√∫i kh√≠", "Phanh ABS", "C√¢n b·∫±ng ƒëi·ªán t·ª≠"],
      features: ["M√†n h√¨nh c·∫£m ·ª©ng 7 inch", "Apple CarPlay", "Android Auto", "Camera l√πi"]
    },
    description: "Honda Civic 2024 - Xe Honda ch√≠nh h√£ng v·ªõi thi·∫øt k·∫ø hi·ªán ƒë·∫°i, ƒë·ªông c∆° m·∫°nh m·∫Ω v√† ti·∫øt ki·ªám nhi√™n li·ªáu",
    isAvailable: true
  },
  {
    name: "Honda CR-V 2024",
    model: "CR-V",
    price: 1050000000,
    category: "suv",
    year: 2024,
    color: "ƒêen √Ånh Kim",
    images: ["/images/cars/honda-crv-2024.jpg"],
    specifications: {
      engine: "1.5L VTEC Turbo",
      transmission: "CVT",
      fuelType: "XƒÉng",
      seating: 7,
      mileage: "7.2L/100km",
      safety: ["Honda SENSING", "6 t√∫i kh√≠", "Phanh ABS", "C√¢n b·∫±ng ƒëi·ªán t·ª≠", "H·ªó tr·ª£ kh·ªüi h√†nh ngang d·ªëc"],
      features: ["M√†n h√¨nh c·∫£m ·ª©ng 8 inch", "Apple CarPlay", "Android Auto", "Camera 360", "C·ª≠a s·ªï tr·ªùi", "Gh·∫ø da"]
    },
    description: "Honda CR-V 2024 - SUV 7 ch·ªó cao c·∫•p v·ªõi kh√¥ng gian r·ªông r√£i v√† trang b·ªã hi·ªán ƒë·∫°i",
    isAvailable: true
  },
  {
    name: "Honda Accord 2024",
    model: "Accord",
    price: 1320000000,
    category: "sedan",
    year: 2024,
    color: "B·∫°c √Ånh Kim",
    images: ["/images/cars/honda-accord-2024.jpg"],
    specifications: {
      engine: "1.5L VTEC Turbo",
      transmission: "CVT",
      fuelType: "XƒÉng",
      seating: 5,
      mileage: "6.8L/100km",
      safety: ["Honda SENSING", "8 t√∫i kh√≠", "Phanh ABS", "C√¢n b·∫±ng ƒëi·ªán t·ª≠", "H·ªó tr·ª£ kh·ªüi h√†nh ngang d·ªëc"],
      features: ["M√†n h√¨nh c·∫£m ·ª©ng 8 inch", "Apple CarPlay", "Android Auto", "Gh·∫ø da cao c·∫•p", "ƒêi·ªÅu h√≤a t·ª± ƒë·ªông 2 v√πng"]
    },
    description: "Honda Accord 2024 - Sedan h·∫°ng D cao c·∫•p v·ªõi thi·∫øt k·∫ø sang tr·ªçng v√† c√¥ng ngh·ªá ti√™n ti·∫øn",
    isAvailable: true
  },
  {
    name: "Honda City 2024",
    model: "City",
    price: 559000000,
    category: "sedan",
    year: 2024,
    color: "ƒê·ªè √Ånh Kim",
    images: ["/images/cars/honda-city-2024.jpg"],
    specifications: {
      engine: "1.5L i-VTEC",
      transmission: "CVT",
      fuelType: "XƒÉng",
      seating: 5,
      mileage: "5.8L/100km",
      safety: ["Honda SENSING", "6 t√∫i kh√≠", "Phanh ABS", "C√¢n b·∫±ng ƒëi·ªán t·ª≠"],
      features: ["M√†n h√¨nh c·∫£m ·ª©ng 8 inch", "Apple CarPlay", "Android Auto", "Camera l√πi"]
    },
    description: "Honda City 2024 - Sedan h·∫°ng B th√¥ng minh v·ªõi c√¥ng ngh·ªá Honda SENSING",
    isAvailable: true
  },
  {
    name: "Honda HR-V 2024",
    model: "HR-V",
    price: 786000000,
    category: "suv",
    year: 2024,
    color: "Xanh D∆∞∆°ng √Ånh Kim",
    images: ["/images/cars/honda-hrv-2024.jpg"],
    specifications: {
      engine: "1.5L i-VTEC",
      transmission: "CVT",
      fuelType: "XƒÉng",
      seating: 5,
      mileage: "6.2L/100km",
      safety: ["Honda SENSING", "6 t√∫i kh√≠", "Phanh ABS", "C√¢n b·∫±ng ƒëi·ªán t·ª≠"],
      features: ["M√†n h√¨nh c·∫£m ·ª©ng 8 inch", "Apple CarPlay", "Android Auto", "Camera l√πi", "C·ª≠a s·ªï tr·ªùi"]
    },
    description: "Honda HR-V 2024 - SUV ƒë√¥ th·ªã nh·ªè g·ªçn v·ªõi thi·∫øt k·∫ø tr·∫ª trung v√† nƒÉng ƒë·ªông",
    isAvailable: true
  },
  {
    name: "Honda Brio 2024",
    model: "Brio",
    price: 418000000,
    category: "hatchback",
    year: 2024,
    color: "Tr·∫Øng Ng·ªçc Trai",
    images: ["/images/cars/honda-brio-2024.jpg"],
    specifications: {
      engine: "1.2L i-VTEC",
      transmission: "CVT",
      fuelType: "XƒÉng",
      seating: 5,
      mileage: "5.3L/100km",
      safety: ["2 t√∫i kh√≠", "Phanh ABS", "C√¢n b·∫±ng ƒëi·ªán t·ª≠"],
      features: ["M√†n h√¨nh c·∫£m ·ª©ng 7 inch", "Bluetooth", "USB", "Camera l√πi"]
    },
    description: "Honda Brio 2024 - Hatchback nh·ªè g·ªçn, ti·∫øt ki·ªám nhi√™n li·ªáu, ph√π h·ª£p ƒë√¥ th·ªã",
    isAvailable: true
  },
  {
    name: "Honda Civic Type R 2024",
    model: "Civic",
    price: 2400000000,
    category: "coupe",
    year: 2024,
    color: "Tr·∫Øng Championship",
    images: ["/images/cars/honda-civic-type-r-2024.jpg"],
    specifications: {
      engine: "2.0L VTEC Turbo",
      transmission: "6MT",
      fuelType: "XƒÉng",
      seating: 4,
      mileage: "9.2L/100km",
      safety: ["Honda SENSING", "6 t√∫i kh√≠", "Phanh Brembo", "C√¢n b·∫±ng ƒëi·ªán t·ª≠"],
      features: ["M√†n h√¨nh c·∫£m ·ª©ng 9 inch", "Apple CarPlay", "Android Auto", "Gh·∫ø Recaro", "H·ªá th·ªëng √¢m thanh Bose"]
    },
    description: "Honda Civic Type R 2024 - Xe th·ªÉ thao hi·ªáu su·∫•t cao v·ªõi s·ª©c m·∫°nh 320 m√£ l·ª±c",
    isAvailable: true
  },
  {
    name: "Honda Pilot 2024",
    model: "Pilot",
    price: 2100000000,
    category: "suv",
    year: 2024,
    color: "X√°m √Ånh Kim",
    images: ["/images/cars/honda-pilot-2024.jpg"],
    specifications: {
      engine: "3.5L V6",
      transmission: "10AT",
      fuelType: "XƒÉng",
      seating: 8,
      mileage: "10.5L/100km",
      safety: ["Honda SENSING", "8 t√∫i kh√≠", "Phanh ABS", "C√¢n b·∫±ng ƒëi·ªán t·ª≠", "H·ªó tr·ª£ xu·ªëng d·ªëc"],
      features: ["M√†n h√¨nh c·∫£m ·ª©ng 10.2 inch", "Apple CarPlay", "Android Auto", "Camera 360", "Gh·∫ø da cao c·∫•p", "3 v√πng ƒëi·ªÅu h√≤a"]
    },
    description: "Honda Pilot 2024 - SUV 8 ch·ªó cao c·∫•p v·ªõi ƒë·ªông c∆° V6 m·∫°nh m·∫Ω",
    isAvailable: true
  }
];

async function seedDatabase() {
  try {
    console.log('üîÑ Connecting to MongoDB Atlas...');
    
    const MONGODB_URI = process.env.MONGODB_URI;
    if (!MONGODB_URI) {
      throw new Error('MONGODB_URI not found in environment variables');
    }
    
    console.log('URI:', MONGODB_URI.replace(/\/\/[^:]+:[^@]+@/, '//***:***@'));
    
    await mongoose.connect(MONGODB_URI, {
      bufferCommands: false,
    });
    
    console.log('‚úÖ Connected to MongoDB Atlas successfully');
    console.log('Database:', mongoose.connection.name);
    console.log('Host:', mongoose.connection.host);
    
    // Check if cars already exist
    const existingCars = await Car.countDocuments();
    console.log(`üìä Existing cars in database: ${existingCars}`);
    
    if (existingCars > 0) {
      console.log('‚ö†Ô∏è Database already has cars. Do you want to:');
      console.log('1. Skip seeding (recommended)');
      console.log('2. Clear and reseed');
      console.log('3. Add more cars');
      
      // For now, we'll add more cars if less than 5
      if (existingCars < 5) {
        console.log('üîÑ Adding more sample cars...');
      } else {
        console.log('‚úÖ Database has enough sample data. Skipping seed.');
        await mongoose.disconnect();
        return;
      }
    }
    
    // Clear existing data if needed (uncomment if you want to reset)
    // await Car.deleteMany({});
    // console.log('üóëÔ∏è Cleared existing car data');
    
    // Insert sample cars
    console.log('üîÑ Inserting sample cars...');
    
    for (const carData of sampleCars) {
      try {
        // Check if car already exists
        const existingCar = await Car.findOne({ 
          name: carData.name, 
          model: carData.model, 
          year: carData.year 
        });
        
        if (!existingCar) {
          const car = new Car(carData);
          await car.save();
          console.log(`‚úÖ Added: ${carData.name}`);
        } else {
          console.log(`‚è≠Ô∏è Skipped: ${carData.name} (already exists)`);
        }
      } catch (error) {
        console.error(`‚ùå Error adding ${carData.name}:`, error.message);
      }
    }
    
    // Final count
    const finalCount = await Car.countDocuments();
    console.log(`üìä Total cars in database: ${finalCount}`);
    
    // Create indexes
    console.log('üîÑ Creating indexes...');
    await Car.createIndexes();
    console.log('‚úÖ Indexes created successfully');
    
    // Test a simple query
    console.log('üîÑ Testing query...');
    const testCars = await Car.find({ isAvailable: true }).limit(3);
    console.log(`‚úÖ Query test successful. Found ${testCars.length} available cars`);
    
    console.log('üéâ Database seeding completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Database seeding failed:', error);
    
    if (error.message.includes('authentication failed')) {
      console.log('\nüîß Authentication Error Solutions:');
      console.log('1. Check username/password in MongoDB Atlas');
      console.log('2. Ensure database user has read/write permissions');
      console.log('3. Check IP whitelist in Network Access');
      console.log('4. Verify connection string format');
    }
    
  } finally {
    await mongoose.disconnect();
    console.log('üîå Disconnected from MongoDB Atlas');
  }
}

// Run the seeding
seedDatabase();