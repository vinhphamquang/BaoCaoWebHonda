{
  "info": {
    "name": "Honda Plus API",
    "description": "Complete API collection for Honda Plus - Premium Honda dealership platform",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "production_url",
      "value": "https://hondaplus.vn/api",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "API Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Check if the API is running and healthy"
          },
          "response": [
            {
              "name": "Healthy Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/health",
                  "host": ["{{base_url}}"],
                  "path": ["health"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Honda Plus API is healthy\",\n  \"timestamp\": \"2024-01-01T00:00:00.000Z\",\n  \"version\": \"1.0.0\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Cars",
      "item": [
        {
          "name": "Get All Cars",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cars?limit=10&sortBy=createdAt&sortOrder=desc",
              "host": ["{{base_url}}"],
              "path": ["cars"],
              "query": [
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of cars to return"
                },
                {
                  "key": "sortBy",
                  "value": "createdAt",
                  "description": "Field to sort by"
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "Sort order (asc/desc)"
                }
              ]
            },
            "description": "Retrieve all Honda cars with pagination and sorting"
          },
          "response": []
        },
        {
          "name": "Search Cars",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cars?search=civic&model=Civic&category=sedan",
              "host": ["{{base_url}}"],
              "path": ["cars"],
              "query": [
                {
                  "key": "search",
                  "value": "civic",
                  "description": "Search term"
                },
                {
                  "key": "model",
                  "value": "Civic",
                  "description": "Filter by model"
                },
                {
                  "key": "category",
                  "value": "sedan",
                  "description": "Filter by category"
                }
              ]
            },
            "description": "Search for specific Honda cars"
          },
          "response": []
        },
        {
          "name": "Filter Cars by Price Range",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cars?minPrice=500000000&maxPrice=1000000000",
              "host": ["{{base_url}}"],
              "path": ["cars"],
              "query": [
                {
                  "key": "minPrice",
                  "value": "500000000",
                  "description": "Minimum price in VND"
                },
                {
                  "key": "maxPrice",
                  "value": "1000000000",
                  "description": "Maximum price in VND"
                }
              ]
            },
            "description": "Filter cars by price range"
          },
          "response": []
        },
        {
          "name": "Filter Cars by Year",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cars?minYear=2023&maxYear=2024",
              "host": ["{{base_url}}"],
              "path": ["cars"],
              "query": [
                {
                  "key": "minYear",
                  "value": "2023",
                  "description": "Minimum manufacturing year"
                },
                {
                  "key": "maxYear",
                  "value": "2024",
                  "description": "Maximum manufacturing year"
                }
              ]
            },
            "description": "Filter cars by manufacturing year"
          },
          "response": []
        },
        {
          "name": "Get Cars by Category",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cars?category=suv",
              "host": ["{{base_url}}"],
              "path": ["cars"],
              "query": [
                {
                  "key": "category",
                  "value": "suv",
                  "description": "Car category (sedan, suv, hatchback, coupe)"
                }
              ]
            },
            "description": "Get cars filtered by category"
          },
          "response": []
        },
        {
          "name": "Get Car by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cars/{{test_car_id}}",
              "host": ["{{base_url}}"],
              "path": ["cars", "{{test_car_id}}"]
            },
            "description": "Get a specific car by its ID"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Get All Orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/orders?limit=10&sortBy=createdAt&sortOrder=desc",
              "host": ["{{base_url}}"],
              "path": ["orders"],
              "query": [
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of orders to return"
                },
                {
                  "key": "sortBy",
                  "value": "createdAt",
                  "description": "Field to sort by"
                },
                {
                  "key": "sortOrder",
                  "value": "desc",
                  "description": "Sort order (asc/desc)"
                }
              ]
            },
            "description": "Retrieve all orders with pagination and sorting"
          },
          "response": []
        },
        {
          "name": "Filter Orders by Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/orders?status=pending",
              "host": ["{{base_url}}"],
              "path": ["orders"],
              "query": [
                {
                  "key": "status",
                  "value": "pending",
                  "description": "Filter by order status"
                }
              ]
            },
            "description": "Get orders filtered by status"
          },
          "response": []
        },
        {
          "name": "Create New Order",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customerName\": \"Nguyễn Văn A\",\n  \"customerEmail\": \"nguyenvana@email.com\",\n  \"customerPhone\": \"0901234567\",\n  \"customerAddress\": \"123 Đường ABC, Quận 1, TP.HCM\",\n  \"carId\": \"{{test_car_id}}\",\n  \"quantity\": 1,\n  \"paymentMethod\": \"bank_transfer\",\n  \"notes\": \"Khách hàng muốn giao xe vào cuối tuần\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/orders",
              "host": ["{{base_url}}"],
              "path": ["orders"]
            },
            "description": "Create a new car order"
          },
          "response": []
        },
        {
          "name": "Search Orders by Customer Email",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/orders?customerEmail={{test_user_email}}",
              "host": ["{{base_url}}"],
              "path": ["orders"],
              "query": [
                {
                  "key": "customerEmail",
                  "value": "{{test_user_email}}",
                  "description": "Filter by customer email"
                }
              ]
            },
            "description": "Search orders by customer email"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Database",
      "item": [
        {
          "name": "Seed Database",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/seed",
              "host": ["{{base_url}}"],
              "path": ["seed"]
            },
            "description": "Populate database with sample Honda car data"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Load Test - Get Cars",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/cars?limit=50",
              "host": ["{{base_url}}"],
              "path": ["cars"],
              "query": [
                {
                  "key": "limit",
                  "value": "50",
                  "description": "Large dataset for load testing"
                }
              ]
            },
            "description": "Load test with larger dataset"
          },
          "response": []
        },
        {
          "name": "Load Test - Get Orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/orders?limit=100",
              "host": ["{{base_url}}"],
              "path": ["orders"],
              "query": [
                {
                  "key": "limit",
                  "value": "100",
                  "description": "Large dataset for load testing"
                }
              ]
            },
            "description": "Load test orders endpoint"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set timestamp for requests",
          "pm.globals.set('timestamp', new Date().toISOString());",
          "",
          "// Log request details",
          "console.log('Making request to:', pm.request.url.toString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global tests for all requests",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Response has success field', function () {",
          "    const jsonData = pm.response.json();",
          "    pm.expect(jsonData).to.have.property('success');",
          "});",
          "",
          "pm.test('Content-Type is application/json', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Log response details",
          "console.log('Response status:', pm.response.status);",
          "console.log('Response time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ]
}
